# ============================================================================
# TechNovaStore - Docker Compose Production (Producción Real)
# ============================================================================
# 
# PROPÓSITO:
#   Configuración para producción real con clientes. Incluye alta disponibilidad,
#   load balancing, backups automáticos, SSL/HTTPS, y monitoreo completo.
#
# USO:
#   docker-compose -f docker-compose.prod.yml up -d
#
# CARACTERÍSTICAS PRINCIPALES:
#   - Nginx Load Balancer (HTTP/HTTPS)
#   - Alta Disponibilidad: 2x API Gateway, 2x Frontend, 2x Product Service
#   - Backups automáticos diarios a S3
#   - ELK Stack completo (Elasticsearch, Logstash, Kibana)
#   - Monitoreo: Prometheus, Grafana, Alertmanager
#   - Exporters: MongoDB, PostgreSQL, Redis, Node
#   - Healthchecks en todos los servicios
#   - SIN límites de recursos (servidor dedicado)
#   - Volúmenes persistentes en /opt/technovastore/
#   - SSL/TLS habilitado
#   - Rate limiting configurado
#   - NODE_ENV: production
#
# SERVICIOS EXCLUSIVOS DE PRODUCCIÓN:
#   - nginx: Load balancer con SSL
#   - db-backup: Backups automáticos
#   - Instancias duplicadas para HA
#
# SEGURIDAD:
#   - Credenciales desde variables de entorno
#   - Puertos de BD NO expuestos externamente
#   - Elasticsearch con autenticación
#   - HTTPS obligatorio
#
# ENTORNO: Producción Real con Clientes
# REQUISITOS: Servidor Linux dedicado, 16GB+ RAM, SSD
# DOMINIO: technovastore.com
# ============================================================================

services:
  # Load Balancer with multiple instances
  nginx:
    image: nginx:alpine
    container_name: technovastore-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - frontend-1
      - frontend-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  db-backup:
    image: technovastore-db-backup:latest
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: technovastore-db-backup
    restart: unless-stopped
    environment:
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET:-}
      S3_ACCESS_KEY: ${BACKUP_S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${BACKUP_S3_SECRET_KEY:-}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - mongodb
      - postgresql
    networks:
      - technovastore-network

  # Databases
  mongodb:
    image: mongo:6.0
    container_name: technovastore-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: technovastore
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgresql:
    image: postgres:15
    container_name: technovastore-postgresql-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: technovastore
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./infrastructure/postgresql/init:/docker-entrypoint-initdb.d
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d technovastore"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: technovastore-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - Multiple instances for load balancing
  api-gateway-1:
    image: technovastore-api-gateway:latest
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: technovastore-api-gateway-1-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway-2:
    image: technovastore-api-gateway:latest
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: technovastore-api-gateway-2-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services - Scaled for production
  product-service:
    image: technovastore-product-service:latest
    build:
      context: ./services/product
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    image: technovastore-order-service:latest
    build:
      context: ./services/order
      dockerfile: Dockerfile.prod
    container_name: technovastore-order-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    image: technovastore-user-service:latest
    build:
      context: ./services/user
      dockerfile: Dockerfile.prod
    container_name: technovastore-user-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    image: technovastore-payment-service:latest
    build:
      context: ./services/payment
      dockerfile: Dockerfile.prod
    container_name: technovastore-payment-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    image: technovastore-notification-service:latest
    build:
      context: ./services/notification
      dockerfile: Dockerfile.prod
    container_name: technovastore-notification-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_SECURE: "true"
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ticket-service:
    image: technovastore-ticket-service:latest
    build:
      context: ./services/ticket
      dockerfile: Dockerfile.prod
    container_name: technovastore-ticket-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      TICKET_SERVICE_PORT: 3005
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: technovastore
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      FRONTEND_URL: https://technovastore.com
      NOTIFICATION_SERVICE_URL: http://notification-service:3000
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automation Services
  sync-engine:
    image: technovastore-sync-engine:latest
    build:
      context: ./automation/sync-engine
      dockerfile: Dockerfile.prod
    container_name: technovastore-sync-engine-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auto-purchase:
    image: technovastore-auto-purchase:latest
    build:
      context: ./automation/auto-purchase
      dockerfile: Dockerfile.prod
    container_name: technovastore-auto-purchase-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  shipment-tracker:
    image: technovastore-shipment-tracker:latest
    build:
      context: ./automation/shipment-tracker
      dockerfile: Dockerfile.prod
    container_name: technovastore-shipment-tracker-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services
  chatbot:
    image: technovastore-chatbot:latest
    build:
      context: ./ai-services/chatbot
      dockerfile: Dockerfile.prod
    container_name: technovastore-chatbot-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      CHATBOT_PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      FRONTEND_URL: https://technovastore.com
      TICKET_SERVICE_URL: http://ticket-service:3005
    depends_on:
      - mongodb
      - ticket-service
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  recommender:
    image: technovastore-recommender:latest
    build:
      context: ./ai-services/recommender
      dockerfile: Dockerfile.prod
    container_name: technovastore-recommender-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Multiple instances for load balancing
  frontend-1:
    image: technovastore-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: technovastore-frontend-1-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.technovastore.com
      NEXT_PUBLIC_CHATBOT_URL: https://chat.technovastore.com
      NEXT_PUBLIC_SOCKET_URL: https://chat.technovastore.com
      NEXT_PUBLIC_APP_URL: https://technovastore.com
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      NEXT_PUBLIC_GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-2:
    image: technovastore-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: technovastore-frontend-2-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.technovastore.com
      NEXT_PUBLIC_CHATBOT_URL: https://chat.technovastore.com
      NEXT_PUBLIC_SOCKET_URL: https://chat.technovastore.com
      NEXT_PUBLIC_APP_URL: https://technovastore.com
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      NEXT_PUBLIC_GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack for Production Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: technovastore-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: technovastore-logstash-prod
    restart: unless-stopped
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ELASTIC_USER: "elastic"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - ./infrastructure/logstash/config/logstash.prod.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./infrastructure/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    networks:
      - technovastore-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: technovastore-kibana-prod
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      XPACK_SECURITY_ENABLED: true
    volumes:
      - ./infrastructure/kibana/config/kibana.prod.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - technovastore-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Monitoring and Logging for Production
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: technovastore-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.prod.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - technovastore-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: technovastore-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_SERVER_ROOT_URL: https://monitoring.technovastore.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - technovastore-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: technovastore-alertmanager-prod
    restart: unless-stopped
    volumes:
      - ./infrastructure/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.prod.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.technovastore.com'
    networks:
      - technovastore-network

  # Database Exporters for Production Monitoring
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: technovastore-mongodb-exporter-prod
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
    command:
      - '--mongodb.uri=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017'
      - '--mongodb.collstats-colls=products,categories,users,orders'
      - '--collect-all'
    networks:
      - technovastore-network
    depends_on:
      - mongodb

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: technovastore-postgres-exporter-prod
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore?sslmode=disable
    networks:
      - technovastore-network
    depends_on:
      - postgresql

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: technovastore-redis-exporter-prod
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - technovastore-network
    depends_on:
      - redis

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: technovastore-node-exporter-prod
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - technovastore-network

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/mongodb
  postgresql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/postgresql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/redis
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/elasticsearch
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/technovastore/data/alertmanager

networks:
  technovastore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
