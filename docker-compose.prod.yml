version: '3.8'

services:
  # Load Balancer with multiple instances
  nginx:
    image: nginx:alpine
    container_name: technovastore-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - frontend-1
      - frontend-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  db-backup:
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: technovastore-db-backup
    restart: unless-stopped
    environment:
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET:-}
      S3_ACCESS_KEY: ${BACKUP_S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${BACKUP_S3_SECRET_KEY:-}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - mongodb
      - postgresql
    networks:
      - technovastore-network

  # Databases
  mongodb:
    image: mongo:6.0
    container_name: technovastore-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: technovastore
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - technovastore-network

  postgresql:
    image: postgres:15
    container_name: technovastore-postgresql-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: technovastore
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./infrastructure/postgresql/init:/docker-entrypoint-initdb.d
    networks:
      - technovastore-network

  redis:
    image: redis:7-alpine
    container_name: technovastore-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - technovastore-network

  # API Gateway - Multiple instances for load balancing
  api-gateway-1:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: technovastore-api-gateway-1-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  api-gateway-2:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: technovastore-api-gateway-2-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Core Services - Scaled for production
  product-service:
    build:
      context: ./services/product
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'

  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile.prod
    container_name: technovastore-order-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile.prod
    container_name: technovastore-user-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  payment-service:
    build:
      context: ./services/payment
      dockerfile: Dockerfile.prod
    container_name: technovastore-payment-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile.prod
    container_name: technovastore-notification-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    networks:
      - technovastore-network

  ticket-service:
    build:
      context: ./services/ticket
      dockerfile: Dockerfile.prod
    container_name: technovastore-ticket-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      TICKET_SERVICE_PORT: 3005
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: technovastore
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      FRONTEND_URL: https://technovastore.com
      NOTIFICATION_SERVICE_URL: http://notification-service:3000
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  # Automation Services
  sync-engine:
    build:
      context: ./automation/sync-engine
      dockerfile: Dockerfile.prod
    container_name: technovastore-sync-engine-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network

  auto-purchase:
    build:
      context: ./automation/auto-purchase
      dockerfile: Dockerfile.prod
    container_name: technovastore-auto-purchase-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  shipment-tracker:
    build:
      context: ./automation/shipment-tracker
      dockerfile: Dockerfile.prod
    container_name: technovastore-shipment-tracker-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRESQL_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/technovastore
    depends_on:
      - postgresql
    networks:
      - technovastore-network

  # AI Services
  chatbot:
    build:
      context: ./ai-services/chatbot
      dockerfile: Dockerfile.prod
    container_name: technovastore-chatbot-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      CHATBOT_PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      FRONTEND_URL: https://technovastore.com
      TICKET_SERVICE_URL: http://ticket-service:3005
    depends_on:
      - mongodb
      - ticket-service
    networks:
      - technovastore-network

  recommender:
    build:
      context: ./ai-services/recommender
      dockerfile: Dockerfile.prod
    container_name: technovastore-recommender-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/technovastore?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - technovastore-network

  # Frontend - Multiple instances for load balancing
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: technovastore-frontend-1-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.technovastore.com
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  frontend-2:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: technovastore-frontend-2-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.technovastore.com
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - technovastore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring and Logging for Production
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: technovastore-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.prod.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - technovastore-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: technovastore-grafana-prod
    restart: unless-stopped
    ports:
      - "3013:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - technovastore-network
    depends_on:
      - prometheus

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/opt/technovastore/data/mongodb
  postgresql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/opt/technovastore/data/postgresql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/opt/technovastore/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/opt/technovastore/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/opt/technovastore/data/grafana

networks:
  technovastore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16