input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Add service field if not present
  if ![service] {
    mutate {
      add_field => { "service" => "unknown" }
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }
  
  # Add environment field
  if ![environment] {
    mutate {
      add_field => { "environment" => "development" }
    }
  }
  
  # Parse error stack traces
  if [stack] {
    mutate {
      gsub => [ "stack", "\n", "\\n" ]
    }
  }
  
  # Add hostname if not present
  if ![hostname] {
    mutate {
      add_field => { "hostname" => "%{host}" }
    }
  }
  
  # Parse HTTP request logs
  if [method] and [url] {
    mutate {
      add_tag => [ "http_request" ]
    }
  }
  
  # Parse business events
  if [event] {
    mutate {
      add_tag => [ "business_event" ]
    }
  }
  
  # Parse performance metrics
  if [operation] and [duration] {
    mutate {
      add_tag => [ "performance_metric" ]
    }
    
    # Extract numeric duration for aggregations
    grok {
      match => { "duration" => "(?<duration_ms>\d+)ms" }
    }
    
    if [duration_ms] {
      mutate {
        convert => { "duration_ms" => "integer" }
      }
    }
  }
  
  # Parse security events
  if "security_event" in [tags] {
    mutate {
      add_tag => [ "security" ]
      add_field => { "alert_priority" => "high" }
    }
  }
  
  # Parse error logs for alerting
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
      add_field => { "alert_priority" => "critical" }
    }
  }
  
  # Parse warning logs
  if [level] == "WARN" or [level] == "WARNING" {
    mutate {
      add_tag => [ "warning" ]
    }
    
    if [critical] == true {
      mutate {
        add_field => { "alert_priority" => "high" }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "technovastore-logs-%{service}-%{+YYYY.MM.dd}"
    template_name => "technovastore-logs"
    template_pattern => "technovastore-logs-*"
    template => {
      "index_patterns" => ["technovastore-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "timestamp" => { "type" => "date" }
          "service" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "environment" => { "type" => "keyword" }
          "hostname" => { "type" => "keyword" }
          "method" => { "type" => "keyword" }
          "url" => { "type" => "keyword" }
          "statusCode" => { "type" => "integer" }
          "responseTime" => { "type" => "keyword" }
          "duration_ms" => { "type" => "integer" }
          "operation" => { "type" => "keyword" }
          "event" => { "type" => "keyword" }
          "userId" => { "type" => "keyword" }
          "sessionId" => { "type" => "keyword" }
          "ip" => { "type" => "ip" }
          "userAgent" => { "type" => "text" }
          "stack" => { "type" => "text" }
          "alert_priority" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}