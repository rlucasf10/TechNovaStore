name: Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Matrix for all services
  build-services:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api-gateway
            context: ./api-gateway
            dockerfile: ./api-gateway/Dockerfile
          - service: product-service
            context: ./services/product
            dockerfile: ./services/product/Dockerfile
          - service: order-service
            context: ./services/order
            dockerfile: ./services/order/Dockerfile
          - service: user-service
            context: ./services/user
            dockerfile: ./services/user/Dockerfile
          - service: payment-service
            context: ./services/payment
            dockerfile: ./services/payment/Dockerfile
          - service: notification-service
            context: ./services/notification
            dockerfile: ./services/notification/Dockerfile
          - service: ticket-service
            context: ./services/ticket
            dockerfile: ./services/ticket/Dockerfile
          - service: sync-engine
            context: ./automation/sync-engine
            dockerfile: ./automation/sync-engine/Dockerfile
          - service: auto-purchase
            context: ./automation/auto-purchase
            dockerfile: ./automation/auto-purchase/Dockerfile
          - service: shipment-tracker
            context: ./automation/shipment-tracker
            dockerfile: ./automation/shipment-tracker/Dockerfile
          - service: chatbot
            context: ./ai-services/chatbot
            dockerfile: ./ai-services/chatbot/Dockerfile
          - service: recommender
            context: ./ai-services/recommender
            dockerfile: ./ai-services/recommender/Dockerfile
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          platforms: linux/amd64,linux/arm64

  # Build multi-arch images for production
  build-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-services

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production images
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF#refs/tags/v}

          # List of all services
          SERVICES=(
            "api-gateway"
            "product-service"
            "order-service"
            "user-service"
            "payment-service"
            "notification-service"
            "ticket-service"
            "sync-engine"
            "auto-purchase"
            "shipment-tracker"
            "chatbot"
            "recommender"
            "frontend"
          )

          # Tag and push production images
          for service in "${SERVICES[@]}"; do
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${VERSION} \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:stable \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:main
          done

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-services
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        service:
          [
            api-gateway,
            product-service,
            order-service,
            user-service,
            payment-service,
            notification-service,
            ticket-service,
            sync-engine,
            auto-purchase,
            shipment-tracker,
            chatbot,
            recommender,
            frontend,
          ]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Image cleanup
  cleanup-images:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: build-services

    steps:
      - name: Delete old development images
        uses: actions/github-script@v7
        with:
          script: |
            const services = [
              'api-gateway', 'product-service', 'order-service', 'user-service',
              'payment-service', 'notification-service', 'ticket-service',
              'sync-engine', 'auto-purchase', 'shipment-tracker',
              'chatbot', 'recommender', 'frontend'
            ];

            for (const service of services) {
              try {
                const packages = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                  package_type: 'container',
                  package_name: `${context.repo.repo}/${service}`,
                  org: context.repo.owner,
                  per_page: 100
                });
                
                // Keep only the latest 10 versions
                const versionsToDelete = packages.data
                  .filter(version => version.metadata.container.tags.some(tag => tag.startsWith('develop-')))
                  .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                  .slice(10);
                
                for (const version of versionsToDelete) {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: `${context.repo.repo}/${service}`,
                    org: context.repo.owner,
                    package_version_id: version.id
                  });
                  console.log(`Deleted ${service} version ${version.id}`);
                }
              } catch (error) {
                console.log(`Error cleaning up ${service}: ${error.message}`);
              }
            }
