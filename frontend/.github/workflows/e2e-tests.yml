name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        test-suite: [critical, visual, performance, accessibility]
        
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Start application
      run: |
        cd frontend
        npm start &
        sleep 10
      env:
        NODE_ENV: production
    
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e:${{ matrix.test-suite }} -- --project=${{ matrix.browser }}
      env:
        CI: true
        BASE_URL: http://localhost:3000
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 30
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-screenshots-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: frontend/test-results/
        retention-days: 30

  visual-regression-baseline:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd frontend
        npx playwright install --with-deps chromium
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Start application
      run: |
        cd frontend
        npm start &
        sleep 10
    
    - name: Update visual regression baselines
      run: |
        cd frontend
        npm run test:e2e:visual -- --project=chromium --update-snapshots
      env:
        CI: true
        BASE_URL: http://localhost:3000
    
    - name: Commit updated baselines
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add frontend/e2e/tests/*.spec.ts-snapshots/
        git diff --staged --quiet || git commit -m "Update visual regression baselines [skip ci]"
        git push

  performance-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd frontend
        npx playwright install --with-deps chromium
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Start application
      run: |
        cd frontend
        npm start &
        sleep 10
    
    - name: Run performance tests
      run: |
        cd frontend
        npm run test:e2e:performance -- --project=chromium --reporter=json
      env:
        CI: true
        BASE_URL: http://localhost:3000
    
    - name: Analyze performance results
      run: |
        cd frontend
        node -e "
          const results = require('./test-results/results.json');
          const perfTests = results.suites.find(s => s.title.includes('Performance'));
          if (perfTests) {
            console.log('Performance test results:');
            perfTests.specs.forEach(spec => {
              console.log(\`- \${spec.title}: \${spec.ok ? 'PASS' : 'FAIL'}\`);
            });
          }
        "

  accessibility-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd frontend
        npx playwright install --with-deps chromium
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Start application
      run: |
        cd frontend
        npm start &
        sleep 10
    
    - name: Run accessibility tests
      run: |
        cd frontend
        npm run test:e2e:accessibility -- --project=chromium
      env:
        CI: true
        BASE_URL: http://localhost:3000
    
    - name: Generate accessibility report
      if: always()
      run: |
        cd frontend
        echo "# Accessibility Test Results" > accessibility-report.md
        echo "" >> accessibility-report.md
        echo "Tests run on: $(date)" >> accessibility-report.md
        echo "" >> accessibility-report.md
        
        if [ -f "test-results/results.json" ]; then
          node -e "
            const results = require('./test-results/results.json');
            const a11yTests = results.suites.find(s => s.title.includes('Accessibility'));
            if (a11yTests) {
              console.log('## Test Results');
              a11yTests.specs.forEach(spec => {
                const status = spec.ok ? '✅ PASS' : '❌ FAIL';
                console.log(\`- \${status}: \${spec.title}\`);
              });
            }
          " >> accessibility-report.md
        fi
    
    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: frontend/accessibility-report.md
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-monitoring, accessibility-audit]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "# E2E Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-monitoring.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Accessibility Tests: ${{ needs.accessibility-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and screenshots are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "- Performance and accessibility reports have been generated" >> $GITHUB_STEP_SUMMARY